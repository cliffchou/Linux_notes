1.exit 关闭终端
2.在Linux文件系统中跳转 
  • pwd —打印出当前工作目录名 
  • cd —更改目录 
  • ls —列出目录内容
  
  快捷键：  
  cd 更改工作目录到你的家目录。 
  cd - 更改工作目录到先前的工作目录。 
  cd ˜user name 更改工作目录到用户家目录。例如, cd ˜bob 会更改工作目 录到用户“bob”的家目录。
  
3.有利于研究linux系统的命令 
  • ls —列出目录内容。
       —除了当前目录外，也可以指定要列出内容的目录，例如 $ ls /usr 。甚至可以列出多个指定目录的内容，例如 $ ls ~ /usr 将列出用户家目录和/usr目录的内容。
	   —ls -l 结果以长模式输出
  • ﬁle —确定文件类型（file filename 会打印文件内容的简单描述） 
  • less —浏览文件内容(less filename 允许你上下滚动文件，按“q”键退出less程序)
  
  ls命令的选项：
  选项 长选项
  -a   --all 列出所有文件，甚至包括文件名以圆点开头的默认会 被隐藏的隐藏文件。
  -d   --directory 通常，如果指定了目录名，ls 命令会列出这个目录中 的内容，而不是目录本身。把这个选项与 -l 选项结合 使用，可以看到所指定目录的详细信息，而不是目录中的内容。 
  -F   --classify 这个选项会在每个所列出的名字后面加上一个指示 符。例如，如果名字是目录名，则会加上一个’/’ 字 符。 
  -h   --human-readable 当以长格式列出时，以人们可读的格式，而不是以字 节数来显示文件的大小。 
  -l 以长格式显示结果。 
  -r   --reverse 以相反的顺序来显示结果。通常，ls 命令的输出结果 按照字母升序排列。 
  -S 命令输出结果按照文件大小来排序。 
  -t 按照修改时间来排序。

  less程序最常用的键盘命令：
  命令                行为
  Page UP or b        向上翻滚一页（page UP在键盘上面有）
  Page Down or space  向下翻滚一页
  UP Arrow            向上翻滚一行（上箭头）
  Down Arrow          向下翻滚一行
  G                   移动到最后一行
  1G or g             移动到开头一行
  /charaters          向前查找指定的字符串
  n                   向前查找下一个出现的字符串，这个字符串是之前所指定查找的
  h                   显示帮助屏幕
  q                   退出 less 程序

4.操作文件和目录
  • cp —复制文件和目录（cp item1 item2; cp item... directory 复制一个或多个项目（或文件）到后面哪个目标目录（或文件）下）
  • mv —移动/重命名文件和目录
  • mkdir —创建目录
  • rm —删除文件和目录（rm是常用的命令，该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变）
  • ln —创建硬链接和符号链接（ln file link 创建硬链接；ln -s item link 创建软链接，item可以是一个文件或是一个目录）

===>>
===>>

  通配符：
  通配符          意义
  *               匹配任意多个字符（包括零个或一个）
  ?               匹配任意一个字符（不包括零个）
  [characters]    匹配任意一个属于字符集中的字符
  [!characters]   匹配任意一个不是字符集中的字符
  [[:class:]]     匹配任意一个属于指定字符类中的字符
  
  最常用的字符类：
  字符类          意义
  [:alnum:]       匹配任意一个字母或数字
  [:alpha:]       匹配任意一个字母
  [:digit:]       匹配任意一个数字
  [:lower:]       匹配任意一个小写字母
  [:upper]        匹配任意一个大写字母
  
  范例：
  模式            匹配对象
  *               所有文件
  g*              文件名以“g”开头的文件
  b*.txt          以”b” 开头，中间有零个或任意多个字符，并以”.txt” 结尾的文件
  Data???         以“Data”开头，其后紧接着 3 个字符的文件
  [abc]*          文件名以”a”,”b”, 或”c” 开头的文件
  BACKUP.[0-9][0-9][0-9] 以”BACKUP.” 开头，并紧接着 3 个数字的文件
  [[:upper:]]*    以大写字母开头的文件
  [![:digit:]]*   不以数字开头的文件
  *[[:lower:]123] 文件名以小写字母结尾，或以“1”，“2”，或“3”结尾的文件
  
  cp命令一些有用选项：
  选项                   意义 
  -a, --archive          复制文件和目录，以及它们的属性，包括所有权和权限。通常，复本具有用户所操作文件的默认属性。 
  -i, --interactive      在重写已存在文件之前，提示用户确认。如果这个选项不指定，cp命令会默认重写文件。 
  -r, --recursive        递归地复制目录及目录中的内容。当复制目录时，需要这个选项（或者 -a 选项）。 
  -u, --update           当把文件从一个目录复制到另一个目录时，仅复制目标目录中不存在的文件，或者是文件内容新于目标目录中已经存在的文件。 
  -v, --verbose          显示翔实的命令操作信息
  -b                     文件被覆盖之前做简单备份（-b不接受参数，）
  
  mv命令一些有用选项：
  选项                  意义 
  -i --interactive      在重写一个已经存在的文件之前，提示用户确认信息。 mv命令本来就会提示是否覆盖，只要不加入 -f 即可。 
  -u --update           当把文件从一个目录移动另一个目录时，只是移动不存在的文件，或者文件内容新于目标目录相对应文件的内容。 
  -v --verbose          当操作 mv 命令时，显示翔实的操作信息
  典例：mv * ../ 移动当前文件夹下的所有文件到上一级目录
        mv test3/*.txt test2 把当前目录的一个子目录里的文件移动到另一个子目录里
  注意：1) mv dir1 dir2 目录的移动，但若目录dir2不存在，则会将dir1改名为dir2.
        2) 你只能操作当前目录下的目录（或文件）及其子目录（或文件），而且当前目录下，若不指定目标目录，那么默认目标目录是当前目录。
           例如：mv file1/xiu.txt xiuxiu.txt 先将file1中的文件改名，再移动到当前目录中来（其实 xiuxiu.txt 实际为/xiuxiu.txt） 		
        3) 移动还是改名，就看目标对象到底是目录（dir,file），还是文件（.txt, .log ...）。其实本质上讲都是移动，不存在的再创建一个，移动后再删除原来的，看起来就像改了名一样，神奇不。
  
  rm命令一些有用选项：
  选项                  意义 
  -i, --interactive     在删除已存在的文件前，提示用户确认信息。 如果不指定 这个选项，rm 会默默地删除文件 
  -r, --recursive       递归地删除文件，这意味着，如果要删除一个目录，而此目录又包含子目录，那么子目录也会被删除。要删除一个目录，必须指定这个选项。 
  -f, --force           忽视不存在的文件，不显示提示信息。这选项颠覆了“-interactive”选项。 
  -v, --verbose         在执行 rm 命令时，显示翔实的操作信息。
  注意：rm 无法直接删除一个目录，必须用-r递归删除
  
  ln创建硬链接和符号链接：
  1) ls -li 展示索引节点的信息
  
5.man 显示程序手册页(命令的帮助文档)

  man 所显示的参考手册是分章节的，以下细分之...
  章节      内容
   1        用户命令
   2        程序接口内核系统调用
   3        C 库函数程序接口
   4        特殊文件，比如说设备结点和驱动程序
   5        文件格式
   6        游戏娱乐，如屏幕保护程序
   7        其他方面
   8        系统管理员命令
  
  apropos 显示适当的命令（可以基于某个关键字的匹配项，搜索参考手册列表）
  注意：man命令加上“-k”选项，和apropos完成一样的功能
  
  whatis 显示非常简洁的命令说明（whatis 程序显示匹配特定关键字的手册页的名字和一行命令说明）
  
  info 显示程序 Info 条目
  当显示一个info页面时，以下命令用来控制阅读器：
  命令                行为
   ?                  显示命令帮助
  PgUp or Backspace   显示上一页
  PgDn or Space       显示下一页
   n                  下一个 - 显示下一个结点
   p                  上一个 - 显示上一个结点
   u Up - 显示当前所显示结点的父结点，通常是个菜单
   Enter               激活光标位置下的超级链接
   q                  退出
    
7. 用别名（alias）创建你自己的命令: alias name='string'
   1) 创建之前，建议先用 type 命令查看下该名字是否已被占用；
   2) 然后再通过 alias 创建属于自己的命令，如 $ alias foo='cd /usr; ls; cd ~'
   3) 删除别名，用 unalias 命令，如 $ unalias foo
   
8.I/O重定向
  • cat    －连接文件（命令读取一个或多个文件，然后复制它们到标准输出，cat [file]）
  • sort   －排序文本行
  • uniq   －报道或省略重复行(通常与sort一起用，从标准输入或单个文件名参数接受数据有序列表，默认情况下，从数据列表中删除任何重复行)
  • grep   －打印匹配行(找文件中匹配文本)
  • wc     －打印文件中换行符，字，和字节个数
  • head   －输出文件第一部分(head命令打印文件的前十行,可以通过参数 -n 来调整打印具体行数)
  • tail   －输出文件最后一部分(tail 命令打印文件的后十行,可以通过参数 -n 来调整打印具体行数)
   
==>重定向标准输出：$ ls -l /bin/usr > ls-output.txt
                          存在的目录  重定向标准输出目标文件
   
   删除一个文件内容（或创建一个新的空文件）：$ > ls-output.txt 
   因为当我们使用 “>” 重定向符来重定向输出结果时，目标文件总是从开头被重写。也就是说简单地使用重定向符，没有命令在它之前，这会删除一个已存在文件的内容或是创建一个新的空文件。
   
==>重定向标准错误：$ ls -l /bin/usr 2> ls-error.txt      此处是 /bin/usr ，即只有错误输出才能输出到该重定向文件中，倘若你用 /usr/bin 表示，只能在屏幕上输出文本内容，并不能输出到该重定向文件中
   注意：因为标准错误和文件描述符 2 一样，所以我们用文本描述符来重定向标准错误。文件描述符 “2”，紧挨着放在重定向操作符之前，来执行重定向标准错误到文件 ls-error.txt任务。
         同理，>> 表示不会删除目标文件中原有的内容，而是接着在其后面输出标准错误
   
==>重定向标准输出、标准错误到同一个文件：1)$ ls -l /bin/usr > ls-output.txt 2>&1     注意 2>&1 这几个命令是紧挨在一起的
                                           该方法完成了两个重定向，首先重定向标准输出到文件 ls-output.txt，然后重定向文件描述符 2（标准错误）到文件描述符 1（标准输出）使用表示法 2>&1。  
                                         2)$ ls -l /bin/usr &> ls-output.txt
										   我们使用单单一个表示法 &> 来重定向标准输出和错误到文件 lsoutput.txt
   注意：重定向是一个“一次性”操作，并不是说你重定向一次就一劳永逸了，每次你不指定系统就默认输出到屏幕上去
   
   
==>重定向标准输入
   1)由于文件名参数的缺席， cat 复制标准输入到标准输出，所以我们看到文本行重复出现。我们可以使用这种行为来创建简短的文本文件
     $ cat > lazy_dog.txt          记得最后输入 Ctrl-d
   2)"<" 重定向标准输入： $ cat < lazy_dog.txt 将标准输入从键盘重定向为 lazy_dog.txt 文件
   
==>管道线：|  使用管道操作符“|”（竖杠），一个命令的标准输出可以管道到另一个命令的标准输入
   例如：less 可以接受标准输入，因此我们可以利用less命令一页一页地显示任何命令的输出，把它们的运行结果送到标准输出
         $ls -l /usr/bin | less   我们可以方便地检测会产生标准输出的任一命令的运行结果
   
==>grep pattern [file...]   当 grep 遇到一个文件中的匹配 “模式”，它会打印出包含这个类型的行。没有file命令参数，则会接受一个标准输入。
   参数：“-i” 导致 grep 忽略大小写当执行搜索时（通常，搜索是大小写敏感的）， 
         “-v” 选项会告诉 grep 只打印不匹配的行.
		 
==>$ tail -f /var/log/messages  可以动态显示该 messages 文件的动态更新
   注意：-f 的只有在其输入为档案时才能使用;
         假如你在 tail 后下了多个档案参数，你便能在同一个窗口内一次追踪数个 log 档.
==>tee 从标准输入读取数据，并同时复制数据到标准输出和一个或多个文件（注意是同时啊，也就是说允许数据继续随着管道线流动）
   用途：在某个中间处理阶段来捕捉一个管道线的内容
   
Linux is about imagination
   
9.echo 显示一行文本（在标准输出中打印出它的文本参数）  
  1) echo * 显示当前目录下的所有文件名（此处 shell 在 echo 命令被执行前，将 * 展开为任何符合条件的字符）
     注意：该程序不会显示隐藏文件（以 . 开头）,若想展开，需以 .* 
  2) .* 显示了当前工作目录和它的父目录(. ..)，该模式可能会产生不对的结果，等效于 ls -d .* | less      
     若想正确完成路径名的展开，可以用更精确模式
	 ls -d .[!.]?*
  3) 算术表达式展开: $((expression))
      shell允许算术表达式通过展开来执行，注意里面的表达式只能用于整数（不存在小数点）
  4) 花括号展开
     你可以从一个包含花括号的模式中创建多个文本字符串，例如 $echo Front-{A,B,C}-Back  --> Front-A-Back Front-B-Back Front-C-Back
	 注意：该模式不能嵌入空白字符串
   
10.clear  清空屏幕
   history  显示历史列表内容
   
==>移动光标
   按键         行动
   Ctrl-a       移动光标到行首。
   Ctrl-e       移动光标到行尾。
   Ctrl-f       光标前移一个字符；和右箭头作用一样。
   Ctrl-b       光标后移一个字符；和左箭头作用一样。
   Alt-f        光标前移一个字。
   Alt-b        光标后移一个字。
   Ctrl-l       清空屏幕，移动光标到左上角。clear 命令完成同样的工作。
  
==>修改文本
   按键         行动
   Ctrl-d       删除光标位置的字符。
   Ctrl-t       光标位置的字符和光标前面的字符互换位置。
   Alt-t        光标位置的字和其前面的字互换位置。
   Alt-l        把从光标位置到字尾的字符转换成小写字母。
   Alt-u        把从光标位置到字尾的字符转换成大写字母。
  
==>剪切和粘贴文本
   按键          行动
   Ctrl-k        剪切从光标位置到行尾的文本。
   Ctrl-u        剪切从光标位置到行首的文本。
   Alt-d         剪切从光标位置到词尾的文本。
   Alt-Backspace 剪切从光标位置到词头的文本。如果光标在一个单词的开头，剪切前一个单词。
   Ctrl-y        把剪切环中的文本粘贴到光标位置。
  
==>自动补全
   按键     行动
   Alt-?    显示可能的自动补全列表。在大多数系统中，你也可以完成这个通过按两次 tab 键，这会更容易些。
   Alt-*    插入所有可能的自动补全。当你想要使用多个可能的匹配项时，这个很有帮助
  
==>搜索所有历史命令 $ history | less 
   搜索指定历史命令 $ history | grep /usr/bin    #找到列出目录/usr/bin 内容的命令（all）
   历史命令展开：!number  #其中这个 number 就是该命令在历史列表中的行号，历史命令展开会得到对应命令执行后的内容
   递增搜索：按下 Ctrl-r 接着输入你要搜索的内容即可（多次输入 Ctrl-r，功能是向上移动历史列表）
   退出搜索：Ctrl-g 和 Ctrl-c
   
   操作历史记录的按键组合
   按键        行为
   Ctrl-p      移动到上一个历史条目。类似于上箭头按键。
   Ctrl-n      移动到下一个历史条目。类似于下箭头按键。
   Alt-<       移动到历史列表开头。
   Alt->       移动到历史列表结尾，即当前命令行。
   Ctrl-r      反向递增搜索。从当前命令行开始，向上递增搜索。
   Alt-p       反向搜索，不是递增顺序。输入要查找的字符串，然后按下Enter，执行搜索。
   Alt-n       向前搜索，非递增顺序。
   Ctrl-o      执行历史列表中的当前项，并移到下一个。如果你想要执行历史列表中一系列的命令，这很方便
  
   历史命令展开
   序列       行为
   !!         重复最后一次执行的命令。可能按下上箭头按键和 enter 
   !number    重复历史列表中第 number 行的命令。
   !string    重复最近历史列表中，以这个字符串开头的命令。
   !?string   重复最近历史列表中，包含这个字符串的命令。
  
11.用户权限命令
   • id –显示用户身份号
   • chmod –更改文件模式
   • umask –设置默认的文件权限
   • su –以另一个用户的身份来运行 shell
   • sudo –以另一个用户的身份来执行命令
   • chown –更改文件所有者
   • chgrp –更改文件组所有权
   • passwd –更改用户密码
  
==>ls命令输出的前十个字符是文件属性：
   1) 第一个字符表明文件类型，有如下
      属性      文件类型
      -         一个普通文件
      d         一个目录
      l         一个符号链接。注意对于符号链接文件，剩余的文件属性总是”rwxrwxrwx”，而且都是虚拟值。真正的文件属性是指符号链接所指向的文件的属性。
      c         一个字符设备文件。这种文件类型是指按照字节流，来处理数据的设备。比如说终端机，或者调制解调器
      b         一个块设备文件。这种文件类型是指按照数据块，来处理数据的设备，例如一个硬盘，或者 CD-ROM 盘。
   2) 剩下的九个字符，叫做文件模式，代表着文件所有者，文件组所有者，和其他人的读，写，执行权限。

==>chmod 更改文件或目录模式(权限)，注意只有文件的所有者或者超级用户才能更改文件或目录的模式
   
   八进制表示法设置权限模式：chmod 600 foo.txt  #-rw 设置文件所有者的权限为读写权限，而删除用户组和其他人的所有权限
   Octal     Binary    File Mode
     0         000       -–
     1         001       --x
     2         010       -w-
     3         011       -wx
     4         100       r-- 
     5         101       r-x
     6         110       rw-
     7         111       rwx
      
   符号表示法指定文件模式：
   u+x         为文件所有者添加可执行权限。
   u-x         删除文件所有者的可执行权限。
   +x          为文件所有者，用户组，和其他所有人添加可执行权限。等价于 a+x。
   o-rw        除了文件所有者和用户组，删除其他人的读权限和写权限。
   go=rw       给群组的主人和任意文件拥有者的人读写权限。如果群组的主人或全局之前已经有了执行的权限，他们将被移除。
   u+x,go=rw   给文件拥有者执行权限并给组和其他人读和执行的权限。多种设定可以用逗号分开。
  
==>su -l username 为指定用户启动一个需要登录的shell，不指定则会默认登录到超级用户(-l 可以简写为 -) 
  
==>chown 更改文件或目录的所有者和用户组.
   chown [owner][:[group]] file...
   
   chown参数实例
   参数        结果
   bob         把文件所有者从当前属主更改为用户 bob。
   bob:users   把文件所有者改为用户 bob，文件用户组改为用户组 users。
   :admins     把文件用户组改为组 admins，文件所有者不变。
   bob:        文件所有者改为用户 bob，文件用户组改为，用户 bob 登录系统时，所属的用户组。
   
==>Linux创建用户、用户组及删除
   一、用户组操作
	1.创建用户组
	  groupadd -g 888 users
	  --创建一个组users，其GID为888
	2.修改用户组
	  groupmod -n user users
	  --修改组名users为user
	3.删除用户组
	  groupdel users
	4.用户组添加、移除用户
	  注：只有root和组管理员能够改变组的成员
	  例：把user1加入users组
	      gpasswd -a user1 users
	  例：把user1退出users组
	      gpasswd -d user1 users
	5.查看用户组下所有用户
	  groups username 显示用户所属的用户组
	  
	  whoami 查看当前登录用户名
	  
	  /etc/group 文件包含了所有组(包括组内所有用户)
	  /etc/shadow和/etc/passwd 文件包含了系统存在的所有用户名
   二、用户操作
	  创建用户
	  useradd user1 --创建用户user1
	  useradd -e 12/30/2016 user2 --创建user2，指定有效期2016/12/30到期
	  useradd -u 600 user3 --指定user3的UID为600
	  用户缺省UID的从500向后顺序增加，500以下作为系统保留账号
	  创建用户user并指定用户组users
	  useradd -g user users 
	
	注意：具体可参考博客园收藏“linux下查看用户及用户组”

==>更改用户密码 passwd [user]

12.进程相关命令
   • ps       –报告当前进程快照(查看进程)
   • top      –显示任务
   • jobs     –列出活跃的任务
   • bg       –把一个任务放到后台执行
   • fg       –把一个任务放到前台执行
   • kill     –给一个进程发送信号
   • killall  –杀死指定名字的进程
   • shutdown –关机或重启系统 	
   
==>ps的相关控制选项
   x 告诉 ps 命令，展示所有进程，不管它们由什么终端（如果有的话）控制(“?” ，表示没有控制终端)
   aux 这个选项组合，能够显示属于每个用户的进程信息
   
==>top命令动态查看进程(默认三分钟更新一次信息)
   1)top程序是用来查看系统中“顶端”进程的
   2)top显示结果分为两部分，最上面的是系统概要，下面是进程列表，以CPU的使用率排序
   
==>把一个进程放在后台执行：就在相应程序(命令)之后加上 &
   让一个进程返回前台执行：fg %[工作序号]        #后台运行的进程对一切来自键盘的输入都免疫，不能用 Ctrl-c 来中断它。可以先用左边命令让进程返回前台执行，再来 Ctrl-c 来中断进程。
   
   停止进程(并不是终止它，而是把一个前台进程移到后台等待): Ctrl-z
   恢复一个停止的进程：fg命令(恢复程序到前台运行) 或者 bg 命令(把程序移到后台)
   
==>kill [signal] PID/%[jobspec] kill命令给进程发信号(不指定具体信号，则默认发送终止信号)
   常用信号
   编号 名字 含义
   1    HUP  挂起。这是美好往昔的痕迹，那时候终端机通过电话线和调制解调器连接到远端的计算机。这个信号被用来告诉程序，控制的终端机已经“挂起”。通过关闭
                   一个终端会话，可以说明这个信号的作用。发送这个信号到终端机上的前台程序，程序会终止。许多守护进程也使用这个信号，来重新初始化。这意味着，当
                   发送这个信号到一个守护进程后，这个进程会重新启动，并且重新读取它的配置文件。Apache 网络服务器守护进程就是一个例子。
   2    INT  中断。实现和 Ctrl-c 一样的功能，由终端发送。通常，它会终止一个程序。
   9    KILL 杀死。这个信号很特别。鉴于进程可能会选择不同的方式，来处理发送给它的信号，其中也包含忽略信号，这样呢，从不发送 Kill 信号到目标进程。而是内核立
                   即终止这个进程。当一个进程以这种方式终止的时候，它没有机会去做些“清理”工作，或者是保存劳动成果。因为这个原因，把 KILL 信号看作杀手锏，当其
                   它终止信号失败后，再使用它。
  15    TERM 终止。这是 kill 命令发送的默认信号。如果程序仍然“活着”，可以接受信号，那么这个信号终止。
  18    CONT 继续。在停止一段时间后，进程恢复运行。
  19    STOP 停止。这个信号导致进程停止运行，而没有终止。像KILL 信号，它不被发送到目标进程，因此它不能被忽略。
  
  注意：信号既可以用号码，也可以用名字，不过名字前要加上字母“SIG”，来指定所要发送的信号。例如 SIGHUP、SIGINT...  
        你必须拥有超级用户权限才可以给不属于你的进程发送信号。
  
==>killall 命令给多个进程发送信号(你必须拥有超级用户权限才可以给不属于你的进程发送信号)
   killall [-u user] [-signal] name... 

==>其它和进程相关的命令
   命令名      命令描述
   pstree      输出一个树型结构的进程列表，这个列表展示了进程间父/子关系。
   vmstat      输出一个系统资源使用快照，包括内存，交换分区和磁盘I/O。为了看到连续的显示结果，则在命令名后加上延时的时间（以秒为单位）。例如，“vmstat 5”。终止输出，按下Ctrl-c 组合键。
   xload       一个图形界面程序，可以画出系统负载的图形。
   tload       与 xload 程序相似，但是在终端中画出图形。使用 Ctrl-c，来终止输出

13.shell环境中的相关命令
   • printenv - 打印部分或所有的环境变量(只是显示环境变量)
   • set      - 设置 shell 选项(可以显示 shell 和 环境变量)
   • export   - 导出环境变量，让随后执行的程序知道。
   • alias    - 创建命令别名
   
   1)查看一个变量的内容
     printenv variable
     echo $variable


   
   
   
   
   
   
   
   
   
   
   
   
   
   